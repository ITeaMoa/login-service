version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.10
    commands:
      # Verify AWS CLI
      - echo "Verifying AWS CLI installation..."
      - aws --version

      # Print cache directory before deletion (for debugging)
      - echo "Cache directory before deletion:"
      - ls -la ~/.aws/cli/cache || echo "No cache folder found"

      # Delete the AWS CLI cache folder
      - rm -rf ~/.aws/cli/cache

      # Install kubectl
      - echo "Installing kubectl..."
      - curl -LO https://dl.k8s.io/release/v1.27.2/bin/linux/amd64/kubectl   
      - chmod +x ./kubectl
      - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl
      - export PATH=$PATH:$HOME/bin
      - echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
      - source ~/.bashrc
      - echo "Checking kubectl version..."
      - kubectl version --short --client

      # # Install dependencies
      - echo "Installing dependencies..."
      - yum groupinstall -y "Development Tools"
      # - sudo yum install -y python3-devel cairo cairo-devel cairo-gobject gobject-introspection-devel libffi-devel
      # - yum install -y meson ninja-build
      # - yum install -y cmake

  pre_build:
    commands:
      # Export AWS credentials
      - export AWS_CLIENT_ID=$AWS_CLIENT_ID
      - export AWS_CLIENT_SECRET=$AWS_CLIENT_SECRET
      - export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
      - export AWS_USER_POOL_ID=$AWS_USER_POOL_ID

      - export PKG_CONFIG_PATH=/usr/lib64/pkgconfig:/usr/share/pkgconfig

      # Login to ECR Registry for docker to push the image to ECR Repository
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-2.amazonaws.com
      # - aws eks update-kubeconfig --region ap-northeast-2 --name iteamoa --role-arn arn:aws:iam::$AWS_ACCOUNT_ID:role/codebuild-iteamoa-loginpage-service-role 

  build:
    commands:
      # Set up image repository details
      - IMAGE_REPO_NAME=$AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-2.amazonaws.com/iteamoa/login
      - IMAGE_TAG=latest

      # Install Python dependencies
      - echo "Installing Python dependencies..."
      - pip install --upgrade pip
      - pip install -r requirements.txt

      # Collect static files
      - echo "Collecting static files..."
      - python manage.py

      # Migrate database
      - echo "Applying database migrations..."
      - python manage.py migrate
      
      # Build Docker Image
      - echo Build started on `date`
      - echo Building the Docker image...          
      - docker build --build-arg AWS_CLIENT_ID=$AWS_CLIENT_ID --build-arg AWS_CLIENT_SECRET=$AWS_CLIENT_SECRET
          --build-arg AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
          --build-arg AWS_USER_POOL_ID=$AWS_USER_POOL_ID
          -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - echo "Listing Docker images to verify the built image:"
      - docker images
      - echo "Searching for our specific image:"
      - docker images | grep $IMAGE_REPO_NAME
      
  post_build:
    commands:
      # # Push Docker Image to ECR Repository
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $IMAGE_REPO_NAME:$IMAGE_TAG

      # # # Setup kubectl with our EKS Cluster
      # - echo "Setting up kubectl for EKS Cluster iteamoa..."
      # - aws eks update-kubeconfig --name iteamoa --region ap-northeast-2

      # # Export AWS credentials to environment variables
      # - export KUBECONFIG=/root/.kube/config
      

      # # Deploy the latest image to the EKS cluster using Kubernetes manifests
      # - echo "Applying deployment and service files to the cluster..."
      # - kubectl apply -f k8s/login-service-deployment.yaml -n loginpage-namespace
      # - kubectl apply -f k8s/login-service.yaml -n loginpage-namespace

      # # Optionally, confirm that the deployment was successful
      # - echo "Deployment applied. Verifying pods..."
      # - kubectl get pods -n loginpage-namespace